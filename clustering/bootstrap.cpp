// Class automatically generated by Dev-C++ New Class wizard

#include "bootstrap.h" 

using namespace std;

// class constructor
bootstrap::bootstrap(fs::path fileName, fs::path sampleDir, int nSamples, int sampleSize)
{
	string command;
 	
	string header;
    char line[maxFileLine];
    vector<string> dataset;
    int sample, ind, nExamples;
    fs::path sampleFileName;

    fs::ifstream file;

    srand( time(NULL) );


    file.open(fileName); 
    if (!file.good()) 
    {
        cout << "\nError in the file '" << fileName.string() << "'\n";
        getchar();
    }
    
    file.getline(line, maxFileLine);
    header = line;
    //cout << header << endl;
    
    int i = 0;
    while (!file.eof())
    {
        file.getline(line, maxFileLine);
        if (!file.fail())
        {                
            dataset.insert(dataset.end(), line);
            //cout << i << " " << dataset[i] << endl;
            i++;
            
        }
   }
   
   nExamples = i;
   //cout << nExamples << endl;
   file.close();
   
   fs::create_directory(sampleDir);
   
//   command = "mkdir " + sampleDir.string();
//   system(command.c_str());

   for (sample = 1; sample <= nSamples; sample++)
   {
      fs::ofstream sampleFile;
      //char buffer[100];
      //string buffer;
      
      string auxSampleFileName;
      
      //sampleFileName = sampleDir + "/bSample";
      
      
      
//   fileRandomPartition = randomPartitionsDir.string() + "/" + fs::basename(dataset) + "RandomPartition" + sampleStr + ".txt";

      auxSampleFileName = sampleDir.string() + "/" + fs::basename(fileName) + "BootstrapSample" + boost::lexical_cast<string>(sample) + ".txt";
      
//      auxSampleFileName = sampleDir.string() + "/bSample";
//      auxSampleFileName += boost::lexical_cast<string>(sample)  + fileName.string();
      sampleFileName = auxSampleFileName;
//      cout << sampleFileName.string() << endl;
      sampleFile.open(sampleFileName, ofstream::out);
      sampleFile << header << endl;
      for (int i = 0; i < sampleSize; i++)
      {
          ind = rand()%nExamples;
          //cout << ind << endl;
          sampleFile << dataset[ind] << endl;
      }
      sampleFile.close();
   }
   
}

// class destructor
//bootstrap::~bootstrap()
//{
//	// insert your code here
//}


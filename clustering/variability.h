
#ifndef VARIABILITY_H
#define VARIABILITY_H


#include <string>
//#include <fstream>


//#include "clusteringTypes.h"
#include "sota.h"
#include "kmeans.h"
#include "dbscan.h"
#include "bootstrap.h"
#include "cpartition.h"
#include "clusteringTypes.h"
#include "similarities.h"
#include "validationIndex.h"
#include <vector>

// para incluir as bibliotecas Boost
#include "boost/filesystem/operations.hpp" // includes boost/filesystem/path.hpp
#include "boost/filesystem/fstream.hpp"    // ditto
#include "boost/filesystem/convenience.hpp"    // ditto
#include <iostream>                        // for std::cout
#include "boost/tokenizer.hpp"
#include "boost/lexical_cast.hpp"

namespace fs = boost::filesystem;

class variability
{
	public:
		// class constructor
        variability();
                    
		// class destructor
		//~variability();

		variability(const variability &a);
		variability & operator = (const variability &a);

        double calculateVariability(std::string fileName, 
                         fs::path experimentsDir,
                         fs::path bsDir,                         
                         int nBootstrapSamples,
                         t_algorithms alg, 
                         t_similarities sim,  
                         t_indices ind, 
                         int nClusters,
                         std::string param);
                         
    private:
        int B; // number of bootstrap samples
        int n; // number of examples (patterns)
        t_indices partitionDistance;
        fs::path dataset;
        fs::path variabilityDir; // directory containing all information generated by this class
        fs::path bootstrapSampleDir; // directory containing the samples generated
        fs::path randomPartitionsDir; // directory containing the random partitions generated
        fs::path algorithmPartitionsDir; // directory containing the partitions generated by the algorithm


        std::vector <cpartition> randomPartitions;
        std::vector <cpartition> algorithmPartitions;

        t_algorithms algorithm; // clustering algorithm employed
        t_similarities similarity;
        std::string parameters;
        
        void generateBootstrapSamples();
        void generateRandomPartitions(int nClusters);
        void runAlgorithm();
        cpartition completePartition(kmeans alg, fs::path fileAlgorithmPartition);
        cpartition completePartition(sota alg, fs::path fileAlgorithmPartition);
        cpartition completePartition(dbscan alg, fs::path fileAlgorithmPartition);
        
//
//        float calculateVariability();
//        float calculateRandomVariability();  
//        float calculateAdjustedVariability();
//        
};

#endif // VARIABILITY_H


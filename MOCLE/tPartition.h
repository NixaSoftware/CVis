// Class automatically generated by Dev-C++ New Class wizard

#ifndef TPARTITION_H
#define TPARTITION_H

#include "cluster.h"
#include "tPatterns.h"
#include "clusteringTypes.h"

#include <iostream>
#include <stdlib.h>
#include <set>
#include <map>
#include <vector>
#include <iterator>
#include <functional>

// para incluir as bibliotecas Boost
/*#include <boost/filesystem/operations.hpp> // includes boost/filesystem/path.hpp
#include <boost/filesystem/fstream.hpp>    // ditto
#include <boost/filesystem/convenience.hpp>    // ditto
#include <boost/lexical_cast.hpp>
*/
#include <boost/filesystem.hpp>
#include <boost/filesystem/fstream.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/tokenizer.hpp>


namespace fs = boost::filesystem;



/*
 * No description
 */
class tPartition
{
    private:

        bool foundCluster(cCluster c, int clu);
        
	public:
        fs::path dataset;

	    tPatterns *patterns;   
        std::vector <cCluster> clusters;
        //std::vector <cluster>::iterator clustersIt;
		typedef std::vector <cCluster>::iterator tClustersIt;
		std::map<int, std::vector<double> > centroids;
		
        // class constructor
        tPartition();
        tPartition(tPatterns *pat);
		tPartition(const tPartition &part);
		// sempre que for usar varias particoes referentes ao mesmo conjunto de dados, criar a primeira particao com o 
        // construtor seguinte, e depois as outras usando o construtor que passa o pattersn ja criado na primeira
        // isso economiza tempo, mas tambem matem o numero associado a cada objeto, coerente entre as varias particoes
        tPartition(fs::path &ds, fs::path &partitionFileName);
		tPartition(fs::path &ds, fs::path &partitionFileName, tPatterns *pat);		
		// class destructor
		~tPartition();
        int nClusters();
        int nPatterns();
        
        // return the label of the cluster of the pattern "pattern"
        int clusterOf(int pattern);
        
        // count the number of patters of the predominant class of cluster c
        int nPatternsPredominantClass(cCluster c);
        int nPatternsClass(int cl, cCluster c);
        
        void calculateCentroids();
        std::map<int, std::vector<double> > *getCentroids();
        
        void showPartition();
        void savePartition(fs::path &fileName);
        void randomPartition(tPatterns *pat, int k, fs::path &fileName);
        void randomPartition(tPatterns *pat, int k);    
};

#endif // TPARTITION_H



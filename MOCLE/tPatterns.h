// Class automatically generated by Dev-C++ New Class wizard

#ifndef TPATTERNS_H
#define TPATTERNS_H

#include <iostream>
#include <stdlib.h>
#include <set>
#include <vector>
#include <iterator>
#include <map>
#include <string>

/*
// para incluir as bibliotecas Boost
#include <boost/filesystem/operations.hpp> // includes boost/filesystem/path.hpp
#include <boost/filesystem/fstream.hpp>    // ditto
#include <boost/filesystem/convenience.hpp>    // ditto
#include <boost/lexical_cast.hpp>
#include <boost/tokenizer.hpp>
*/
#include <boost/filesystem.hpp>
#include <boost/filesystem/fstream.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/tokenizer.hpp>



#include "similarities.h"
#include "clusteringTypes.h"

struct cmp
{
  bool operator()(std::string s1, std::string s2) const
  {
    return s1 < s2;
  }
};

typedef std::pair<int, float> t_pattern;
struct patternCmp : public std::binary_function <t_pattern, t_pattern, bool> 
{
       bool operator()(t_pattern x, t_pattern y) { return (x.second < y.second); }
};


namespace fs = boost::filesystem;

   class TPatternDescription {
   public:
      int patternNumber;    
      std::string patternLabel;
      int patternClass;
      std::vector<double> values;
      
      TPatternDescription();
      TPatternDescription(const TPatternDescription &patternDescription);
   };

/*
 * No description
 */
class tPatterns
{
   public:
   
      fs::path dataset;
      std::vector <TPatternDescription> patternsDescription;
      typedef std::vector <TPatternDescription>::iterator tPatternsDescriptionIt;
      
      std::map<int, std::map<int, double> > distanceMatrix;
      typedef std::map<int, std::map<int, double> >::iterator tDistanceMatrixIt;
      
      std::map<int, std::map<int, double> > correlationMatrix;
      typedef std::map<int, std::map<int, double> >::iterator tcorrelationMatrixIt;

      std::map<int, std::vector<int> > nnList, nnListPearson;
      typedef std::map<int, std::vector<int> >::iterator tnnListIt;
      
      // class constructor
      tPatterns();//fs::path ds);
      tPatterns(const tPatterns &pat);
      
      //tPatterns(fs::path &ds, fs::path &filePatterns, fs::path &fileClasses);
      tPatterns(fs::path &ds, fs::path &filePatterns);

      int patternClass(int number);
      int patternClass(std::string label);
      int patternNumber(std::string label);
      std::string patternLabel(int number);
      std::vector<double> patternValues(int number); // return the values of atributes of an object, given its number
      std::vector<double> patternValues(std::string label); // return the values of atributes of an object, given its label
      int nPatterns();
      int nAttributes();
      void showPatterns();
    
      
   private:
       
      void generateDistanceMatrix();
      void generatennList();
      void generateCorrelationMatrix();
      void generatennListPearson();

};

#endif // TPATTERNS_H
